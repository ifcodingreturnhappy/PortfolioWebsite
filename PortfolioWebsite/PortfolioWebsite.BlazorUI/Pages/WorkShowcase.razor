@page "/work"
@using PortfolioWebsite.BlazorUI.Models

@inject IJSRuntime JSRuntime
@inject HttpClient _client;

<h2 class="white-text text-center mb-5 vp-anim-3">Work Showcase</h2>

@if (CanDrawCards())
{
    <div class="dropdown mb-5 text-center">
        <button class="btn dropdown-toggle main-button vp-anim-4" type="button"
                data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
            Tags
        </button>
        <div class="dropdown-menu dropdown-menu-center constant-glow px-0 py-0">
            <form class="text-left px-2 py-1 white-text">
                @foreach (var tag in availableTags)
                {
                    <div class="py-1 simple-hover" @onclick="() => tag.IsSelected = !tag.IsSelected">
                        <a class="non-selectable">
                            <span class="@(tag.IsSelected ? checkedCSS : notCheckedCSS) main-color"></span>
                            @(tag.Name)
                        </a>
                    </div>
                }
            </form>
        </div>
    </div>

    <div class="container-fluid">
        <div class="row">
            @foreach (var articleMetadata in workArticlesMetadata)
            {
                bool isCardTagSelected = availableTags.Where(x => x.IsSelected).Select(x => x.Name).Intersect(articleMetadata.Tags).Any();

                <div class="col-md-6 mb-5 vp-anim-4" style="@(isCardTagSelected ? "display: block" : "display: none")">
                    <Card Title="@articleMetadata.Title"
                          ImagePath="@articleMetadata.ImagePath"
                          Description="@articleMetadata.Description"
                          pageRef="@articleMetadata.PageRef"
                          publishDate="@articleMetadata.PublishDate"
                          Tags="@articleMetadata.Tags"></Card>
                </div>
            }
        </div>
    </div>
}
else
{
    <div class="empty-block"></div>
    <Loader @ref="loader" TimeOut="8000" TimeOutMessage="Unable to get the article data. Please try again."></Loader>
}



@code {

    private Loader loader;

    List<WorkArticleMetadataModel> workArticlesMetadata = new List<WorkArticleMetadataModel>();
    private List<ArticleTagModel> availableTags;

    private string checkedCSS = "far fa-check-square";
    private string notCheckedCSS = "far fa-square";

    private bool CanDrawCards()
    {
        bool canDrawCards = workArticlesMetadata.Count > 0 && !loader.HasTimedOut;

        if (canDrawCards)
        {
            loader.StopTimeOut();
        }

        return canDrawCards;
    }

    protected async override Task OnInitializedAsync()
    {
        string path = $"ArticleMetadata/articles.json";

        // Get metadata for all the articles
        var metadataJson = await _client.GetStringAsync(path);

        // Parse raw article metadata json to the desired format
        workArticlesMetadata = JsonConvert.DeserializeObject<List<WorkArticleMetadataModel>>(metadataJson, new IsoDateTimeConverter { DateTimeFormat = "dd/MM/yyyy" });
        await Task.Delay(300);

        workArticlesMetadata = workArticlesMetadata.OrderByDescending(x => x.PublishDate).ToList();

        availableTags = GetAvailableTags();
    }


    //This will allow to add the vp-anims, once when async data call is finished
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (CanDrawCards())
        {
            var json = await _client.GetStringAsync("Data/OnViewportEnterCSSAnimations.json");
            await JSRuntime.InvokeVoidAsync("setupViewportAnimations", json);
        }
    }

    private List<ArticleTagModel> GetAvailableTags()
    {
        List<string> availableTags = new List<string>();

        foreach (var article in workArticlesMetadata)
        {
            availableTags.AddRange(article.Tags);
        }

        return availableTags.Distinct().Select(x => new ArticleTagModel { IsSelected = true, Name = x }).ToList();
    }
}
