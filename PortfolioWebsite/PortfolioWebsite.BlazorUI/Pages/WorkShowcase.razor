@page "/work"
@using PortfolioWebsite.BlazorUI.Models

@inject IPageEnumerator<WorkArticleMetadataModel> articleEnumerator;
@inject IJSRuntime JSRuntime;
@inject IJavascriptViewportAnimator JSAnimator;


<h2 class="white-text text-center mb-5 vp-anim-3">Work Showcase</h2>

<div class="dropdown mb-5 text-center">
    <button class="btn dropdown-toggle main-button vp-anim-4" type="button" id="dropdownMenuButton" 
            data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
        Tags
    </button>
    <div class="dropdown-menu dropdown-menu-center secondary-background-color">
        <form class="px-0 py-0 text-center">
            @foreach (var tag in availableTags)
            {
                <div class="form-check">
                    <input type="checkbox" @bind="tag.IsSelected" id="@($"check{tag.Name}")">
                    <label class="form-check-label non-selectable" for="@($"check{tag.Name}")">
                        @(tag.Name)
                    </label>
                </div>
            }
        </form>
    </div>
</div>

<div class="container-fluid">
    <div class="row">
        @foreach (var articleMetadata in workArticlesMetadata)
        {
            bool isCardVisible = availableTags.Where(x => x.IsSelected).Select(x => x.Name).Intersect(articleMetadata.Tags).Any();

            <div class="col-md-6 mb-5" style="@(isCardVisible ? "display: block" : "display: none")">
                <Card Title="@articleMetadata.Title"
                      ImagePath="@articleMetadata.ImagePath"
                      Description="@articleMetadata.Description"
                      pageRef="@articleMetadata.PageRef"
                      publishDate="@articleMetadata.PublishDate"
                      Tags="@articleMetadata.Tags"></Card>
            </div>
        }
    </div>
</div>


@code {

    List<WorkArticleMetadataModel> workArticlesMetadata;
    private List<ArticleTagModel> availableTags;


    protected async override Task OnParametersSetAsync()
    {
        string path = "Pages/Articles";

        workArticlesMetadata = await articleEnumerator.GetFilesMetadata(path);

        availableTags = GetAvailableTags();
    }


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSAnimator.SetupJavascriptViewportAnimation(JSRuntime);
        }
    }

    private List<ArticleTagModel> GetAvailableTags()
    {
        List<string> availableTags = new List<string>();

        foreach (var article in workArticlesMetadata)
        {
            availableTags.AddRange(article.Tags);
        }

        return availableTags.Distinct().Select(x => new ArticleTagModel { IsSelected = true, Name = x}).ToList();
    }
}
