<!--
@if (!HasTimedOut)
{
    <div class="container-fluid loader"></div>
}
else
{
    <div class="container-fluid text-center">
        <p class="text-danger font-weight-bold" style="font-size: 4em"><i class="fas fa-exclamation-circle"></i></p>
        <p class="text-danger font-weight-bold">@TimeOutMessage</p>
    </div>
}
-->

<div class="container-fluid loading-circle" style="display: @(hasTimedOut ? "none" : "block")"></div>

<div class="container-fluid text-center" style="display: @(hasTimedOut ? "block" : "none")">
    <p class="text-danger font-weight-bold" style="font-size: 4em"><i class="fas fa-exclamation-circle"></i></p>
    <p class="text-danger font-weight-bold">@TimeOutMessage</p>
</div>


@code {

    private bool hasTimedOut = false;

    /// <summary>
    /// Time (in miliseconds) that enables a timeout message on the loader component.
    /// </summary>
    [Parameter]
    public int TimeOut { get; set; } = 0;

    [Parameter]
    public string TimeOutMessage { get; set; }

    [Parameter]
    public EventCallback OnTimeOut { get; set; }


    protected override async Task OnInitializedAsync()
    {
        hasTimedOut = false;

        await Task.Delay(TimeOut);

        hasTimedOut = true;

        await OnTimeOut.InvokeAsync(hasTimedOut);
    }

    public void Reset()
    {
        hasTimedOut = false;
    }
}
