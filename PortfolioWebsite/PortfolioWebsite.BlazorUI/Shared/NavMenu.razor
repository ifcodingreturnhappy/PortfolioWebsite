@inject INavigationController _navigationController
@inject NavigationManager NavigationManager

<nav class="navbar main-background-color navbar-expand-sm navbar-toggleable-sm fixed-top vp-anim-3">
    <div class="container-fluid">
        <a class="navbar-brand main-color clickable-1 scale-up" href="/">
            <span class="white-text">[</span>
            If Coding Return Happy
            <span class="white-text">]</span>
        </a> <!-- alterar isto para navlink async-->

        <button class="navbar-toggler main-color main-outline border-0" @onclick="ToggleNavMenu" type="button" data-toggle="collapse" data-target=".navbar-collapse" aria-controls="navbarSupportedContent"
                aria-expanded="false" aria-label="Toggle navigation">
            <span class="fas @NavMenuIconCssClass main-icon-animation main-color"></span>
        </button>

        <div class="@NavMenuCssClass navbar-collapse d-sm-inline-flex flex-sm-row-reverse">
            <ul class="navbar-nav">
                @foreach (var navElement in _navigationController.NavigationLinks)
                {
                    <li class="nav-item">
                        <a class="nav-link main-color clickable-2 @SetAfterActivationCssClass(navElement.IsSelected)"
                           href="@navElement.LinkRef"
                           @onclick="() => { CollapseNavMenu(); }">@(navElement.LinkText)</a>
                    </li>
                }
            </ul>
        </div>
    </div>
</nav>


@code {

    bool collapseNavMenu = true;

    string NavMenuCssClass => collapseNavMenu ? "collapse" : null;
    string NavMenuIconCssClass => collapseNavMenu ? "fa-bars" : "fa-times-circle";
    string SetAfterActivationCssClass(bool isElementSelected)
    {
        return isElementSelected ? "main-selected-element" : "";
    }


    protected override Task OnInitializedAsync()
    {
        _navigationController.InitializeLinks();

        NavigationManager.LocationChanged += LocationChangedCallback;

        UnderlineCurrentPageNavLink();

        return base.OnInitializedAsync();
    }

    void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }

    void CollapseNavMenu()
    {
        collapseNavMenu = true;
    }

    void LocationChangedCallback(object sender, LocationChangedEventArgs e)
    {
        UnderlineCurrentPageNavLink();

        StateHasChanged();
    }

    void UnderlineCurrentPageNavLink()
    {
        foreach (var link in _navigationController.NavigationLinks)
        {
            if (NavigationManager.Uri.Contains(link.LinkRef))
                link.IsSelected = true;
            else
                link.IsSelected = false;
        }
    }
}
}

