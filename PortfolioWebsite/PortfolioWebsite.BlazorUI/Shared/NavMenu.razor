@inject INavigationController _navigationController
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime;


<nav class="navbar main-background-color navbar-expand-md fixed-top vp-anim-3">
    <div class="container-fluid">
        <a class="navbar-brand main-color clickable-1 scale-up" href="/" @onclick="() => { CollapseNavMenu(); }">
            <span class="white-text">[</span>
            If Coding Return Happy
            <span class="white-text">]</span>
        </a> <!-- alterar isto para navlink async-->

        <button class="navbar-toggler main-color main-outline border-0" @onclick="ToggleNavMenu" type="button" data-toggle="collapse" data-target=".navbar-collapse" aria-controls="navbarSupportedContent"
                aria-expanded="false" aria-label="Toggle navigation">
            <span class="fas @NavMenuIcon main-icon-animation main-color"></span>
        </button>

        <div class="navbar-collapse flex-md-row-reverse fullscreen-menu @(NavMenuVisibility)" id="main-navbar">
            <ul class="navbar-nav fullscreen-menu-content" id="main-navbar-content">
                @foreach (var navElement in _navigationController.NavigationLinks)
                {
                    <li class="nav-item">
                        <a class="nav-link main-color clickable-2 selectable-item"
                           href="@navElement.LinkRef"
                           @onclick="() => { CollapseNavMenu(); }">@(navElement.LinkText)</a>

                    </li>
                }
            </ul>
        </div>
    </div>
</nav>


@code {
    public static bool isNavMenuCollapsed { get; set; } = true;
    string NavMenuVisibility => isNavMenuCollapsed ? "" : "wipe-down";
    string NavMenuIcon => isNavMenuCollapsed ? "fa-bars" : "fa-times-circle";


    protected override Task OnInitializedAsync()
    {
        _navigationController.InitializeLinks();

        return base.OnInitializedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await JSRuntime.InvokeVoidAsync("updateCurrentPageIndicator");
    }


    static void ToggleNavMenu()
    {
        isNavMenuCollapsed = !isNavMenuCollapsed;
    }

    static void CollapseNavMenu()
    {
        isNavMenuCollapsed = true;
    }
}
}

